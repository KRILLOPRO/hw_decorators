import os
import datetime


def logger(log_file_path):
    """
    –ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π.
    
    –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª:
    - –î–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏
    - –ò–º—è —Ñ—É–Ω–∫—Ü–∏–∏
    - –ê—Ä–≥—É–º–µ–Ω—Ç—ã (–ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –∏ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ)
    - –í–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    
    Args:
        log_file_path (str): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤
    """
    def decorator(old_function):
        def new_function(*args, **kwargs):
            # –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = old_function(*args, **kwargs)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
            now = datetime.datetime.now()
            timestamp = now.strftime("%Y-%m-%d %H:%M:%S")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
            args_str = ', '.join([str(arg) for arg in args])
            kwargs_str = ', '.join([f"{k}={v}" for k, v in kwargs.items()])
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
            all_args = []
            if args_str:
                all_args.append(args_str)
            if kwargs_str:
                all_args.append(kwargs_str)
            arguments = ', '.join(all_args) if all_args else ''
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ª–æ–≥ –∑–∞–ø–∏—Å—å
            log_entry = f"{timestamp} - Function: {old_function.__name__}, Args: ({arguments}), Result: {result}\n"
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º –ø—É—Ç–µ–º
            with open(log_file_path, 'a', encoding='utf-8') as log_file:
                log_file.write(log_entry)
            
            return result

        return new_function
    return decorator


# –û—á–∏—â–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –ª–æ–≥ —Ñ–∞–π–ª
if os.path.exists('demo.log'):
    os.remove('demo.log')


@logger('demo.log')
def –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ_–æ–ø–µ—Ä–∞—Ü–∏–∏(a, b, –æ–ø–µ—Ä–∞—Ü–∏—è='—Å–ª–æ–∂–µ–Ω–∏–µ'):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤"""
    if –æ–ø–µ—Ä–∞—Ü–∏—è == '—Å–ª–æ–∂–µ–Ω–∏–µ':
        return a + b
    elif –æ–ø–µ—Ä–∞—Ü–∏—è == '—É–º–Ω–æ–∂–µ–Ω–∏–µ':
        return a * b
    elif –æ–ø–µ—Ä–∞—Ü–∏—è == '–¥–µ–ª–µ–Ω–∏–µ':
        return a / b if b != 0 else "–î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å!"
    else:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è"


@logger('demo.log')
def —Ä–∞–±–æ—Ç–∞_—Å–æ_—Å–ø–∏—Å–∫–∞–º–∏(—Å–ø–∏—Å–æ–∫, –∏–Ω–¥–µ–∫—Å=0):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Å–ª–æ–∂–Ω—ã–º–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö"""
    if –∏–Ω–¥–µ–∫—Å < len(—Å–ø–∏—Å–æ–∫):
        return —Å–ø–∏—Å–æ–∫[–∏–Ω–¥–µ–∫—Å]
    else:
        return "–ò–Ω–¥–µ–∫—Å –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞"


@logger('demo.log')
def –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä_—á–∏—Å–µ–ª(–¥–æ_—á–∏—Å–ª–∞):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""
    for i in range(–¥–æ_—á–∏—Å–ª–∞):
        yield i * 2


@logger('demo.log')
def –æ–±—Ä–∞–±–æ—Ç–∫–∞_–æ—à–∏–±–æ–∫(–∑–Ω–∞—á–µ–Ω–∏–µ):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        return 100 / –∑–Ω–∞—á–µ–Ω–∏–µ
    except ZeroDivisionError:
        return "–û—à–∏–±–∫–∞: –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å"
    except Exception as e:
        return f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"


@logger('demo.log')
def –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è_–ª–æ–≥–≥–µ—Ä–∞():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –ª–æ–≥–≥–µ—Ä–∞"""
    
    print("üîç –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –†–ê–ë–û–¢–´ –õ–û–ì–ì–ï–†–ê")
    print("=" * 50)
    
    print("\n1. –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:")
    print(f"   5 + 3 = {–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ_–æ–ø–µ—Ä–∞—Ü–∏–∏(5, 3)}")
    print(f"   4 * 7 = {–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ_–æ–ø–µ—Ä–∞—Ü–∏–∏(4, 7, –æ–ø–µ—Ä–∞—Ü–∏—è='—É–º–Ω–æ–∂–µ–Ω–∏–µ')}")
    print(f"   15 / 3 = {–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ_–æ–ø–µ—Ä–∞—Ü–∏–∏(15, 3, –æ–ø–µ—Ä–∞—Ü–∏—è='–¥–µ–ª–µ–Ω–∏–µ')}")
    
    print("\n2. –†–∞–±–æ—Ç–∞ —Å–æ —Å–ø–∏—Å–∫–∞–º–∏:")
    —Ç–µ—Å—Ç–æ–≤—ã–π_—Å–ø–∏—Å–æ–∫ = ['python', 'javascript', 'go', 'rust']
    print(f"   –≠–ª–µ–º–µ–Ω—Ç –ø–æ –∏–Ω–¥–µ–∫—Å—É 0: {—Ä–∞–±–æ—Ç–∞_—Å–æ_—Å–ø–∏—Å–∫–∞–º–∏(—Ç–µ—Å—Ç–æ–≤—ã–π_—Å–ø–∏—Å–æ–∫)}")
    print(f"   –≠–ª–µ–º–µ–Ω—Ç –ø–æ –∏–Ω–¥–µ–∫—Å—É 2: {—Ä–∞–±–æ—Ç–∞_—Å–æ_—Å–ø–∏—Å–∫–∞–º–∏(—Ç–µ—Å—Ç–æ–≤—ã–π_—Å–ø–∏—Å–æ–∫, –∏–Ω–¥–µ–∫—Å=2)}")
    print(f"   –≠–ª–µ–º–µ–Ω—Ç –ø–æ –∏–Ω–¥–µ–∫—Å—É 10: {—Ä–∞–±–æ—Ç–∞_—Å–æ_—Å–ø–∏—Å–∫–∞–º–∏(—Ç–µ—Å—Ç–æ–≤—ã–π_—Å–ø–∏—Å–æ–∫, –∏–Ω–¥–µ–∫—Å=10)}")
    
    print("\n3. –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã:")
    gen = –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä_—á–∏—Å–µ–ª(5)
    print(f"   –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω: {gen}")
    print(f"   –°–ø–∏—Å–æ–∫ –∏–∑ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞: {list(–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä_—á–∏—Å–µ–ª(3))}")
    
    print("\n4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫:")
    print(f"   100 / 5 = {–æ–±—Ä–∞–±–æ—Ç–∫–∞_–æ—à–∏–±–æ–∫(5)}")
    print(f"   100 / 0 = {–æ–±—Ä–∞–±–æ—Ç–∫–∞_–æ—à–∏–±–æ–∫(0)}")
    
    print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    return "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"


if __name__ == '__main__':
    —Ä–µ–∑—É–ª—å—Ç–∞—Ç = –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è_–ª–æ–≥–≥–µ—Ä–∞()
    
    print(f"\nüìÑ –†–ï–ó–£–õ–¨–¢–ê–¢: {—Ä–µ–∑—É–ª—å—Ç–∞—Ç}")
    print("\nüìã –°–û–î–ï–†–ñ–ò–ú–û–ï –õ–û–ì–ê:")
    print("=" * 50)
    
    # –ß–∏—Ç–∞–µ–º –∏ –≤—ã–≤–æ–¥–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ª–æ–≥–∞
    with open('demo.log', 'r', encoding='utf-8') as f:
        for line_num, line in enumerate(f, 1):
            print(f"{line_num:2d}. {line.strip()}")
    
    print("\n" + "=" * 50)
    print("üéâ –õ–æ–≥–≥–µ—Ä —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω—ë–Ω –∫ –∫–æ–¥—É –∏–∑ –ø–∞–ø–∫–∏ hw_iterators!") 